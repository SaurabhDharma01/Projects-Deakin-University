# get the working directory
getwd()
# Set the working directory
setwd("C:/Users/Arun/Downloads/Deakin/Real World Analytics/Mid Term/Data")
# Read the data in a data frame
data <- read.table("ENB_2023.txt")
# Read the data file into a matrix
the.data <- as.matrix(read.table("ENB_2023.txt", header = FALSE))
View(data)
summary(data)
# find the names of the columns
names(data)
# rename the columns
colnames(data)<- c('X1','X2','X3','X4','X5','Y')
head(data,10)
# Define a function to calculate the min_max scale
min_max_scaler <- function(x) {
range <- max(x, na.rm = TRUE) - min(x, na.rm = TRUE)  # na.rm will ignore NA values
if (range == 0) {
return(rep(0, length(x)))  # shall deal with situations when all elements are same
} else {
return((x - min(x, na.rm = TRUE)) / range)
}
}
# Extract only the "Y" variable (column)
Y_variable <- data[, 6]
# Applying the min-max scaling to all numeric columns of the data frame.
# In this specific case all the columns are numeric in any case.
df_scaled <- as.data.frame(lapply(data, function(x) {
if (is.numeric(x)) min_max_scaler(x) else x
}))
View(df_scaled)
summary(df_scaled)
# Set up a 2x3 grid for plots
par(mfrow = c(2, 3))
# Scatter plot for X1 vs Y with a blue color
plot(df_scaled[, 1], Y_variable, main = "V1 vs Y", xlab = "V1", ylab = "Y", col = "lightblue")
abline(lm(Y_variable ~ df_scaled[, 1]), col = "blue")  # Add regression line
# Similar plots for X2 to X5...
# Scatter plot for X2 vs Y with a green color
plot(df_scaled[, 2], Y_variable, main = "V2 vs Y", xlab = "V2", ylab = "Y", col = "lightgreen")
abline(lm(Y_variable ~ df_scaled[, 2]), col = "green")
# Scatter plot for X3 vs Y with a red color
plot(df_scaled[, 3], Y_variable, main = "V3 vs Y", xlab = "V3", ylab = "Y", col = "red")
abline(lm(Y_variable ~ df_scaled[, 3]), col = "darkred")
# Scatter plot for X4 vs Y with a purple color
plot(df_scaled[, 4], Y_variable, main = "V4 vs Y", xlab = "V4", ylab = "Y", col = "purple1")
abline(lm(Y_variable ~ data[, 4]), col = "purple")
# Scatter plot for X5 vs Y with an orange color
plot(df_scaled[, 5], Y_variable, main = "V5 vs Y", xlab = "V5", ylab = "Y", col = "orange")
abline(lm(Y_variable ~ df_scaled[, 5]), col = "darkorange")
# Add an overall title
main_title <- "Scatter Plots of Independent Variables (V1 to V5) vs Dependent Variable (Y)"
main_title <- paste(main_title, "\n with Regression Lines", sep="")
mtext(main_title, line = 0.5, outer = TRUE, cex = 1.2)
# Reset the layout to 2x3 for histograms
par(mfrow = c(2, 3))
# Histogram for X1 with a blue color
hist(df_scaled[, 1], main = "Histogram for V1", xlab = "V1", col = "lightblue", breaks = 20)
# Histogram for X2 with a green color
hist(df_scaled[, 2], main = "Histogram for V2", xlab = "V2", col = "lightgreen", breaks = 20)
# Histogram for X3 with a red color
hist(df_scaled[, 3], main = "Histogram for V3", xlab = "V3", col = "red", breaks = 20)
# Histogram for X4 with a purple color
hist(df_scaled[, 4], main = "Histogram for V4", xlab = "V4", col = "purple1", breaks = 20)
# Histogram for X5 with an orange color
hist(df_scaled[, 5], main = "Histogram for V5", xlab = "V5", col = "orange", breaks = 20)
# Histogram for Y with a pink color
hist(Y_variable, main = "Histogram for Y", xlab = "Y", col = "pink", breaks = 20)
# Add an overall title
main_title_hist <- "Histograms of Variables (X1 to X5) and Y"
mtext(main_title_hist, line = 0.5, outer = TRUE, cex = 1.2)
# Set up a 2x3 grid for box plots
par(mfrow = c(2, 3))
# Box plot for X1
boxplot(df_scaled[, 1], main = "Boxplot for X1", col = "lightblue", border = "black", horizontal = TRUE)
# Box plot for X2
boxplot(df_scaled[, 2], main = "Boxplot for X2", col = "lightgreen", border = "black", horizontal = TRUE)
# Box plot for X3
boxplot(df_scaled[, 3], main = "Boxplot for X3", col = "red", border = "black", horizontal = TRUE)
# Box plot for X4
boxplot(df_scaled[, 4], main = "Boxplot for X4", col = "purple1", border = "black", horizontal = TRUE)
# Box plot for X5
boxplot(df_scaled[, 5], main = "Boxplot for X5", col = "orange", border = "black", horizontal = TRUE)
# Box plot for Y
boxplot(Y_variable, main = "Boxplot for Y", col = "pink", border = "black", horizontal = TRUE)
# Add an overall title
main_title_boxplot <- "Box Plots of Variables (X1 to X5) and Y"
mtext(main_title_boxplot, line = 0.5, outer = TRUE, cex = 1.2)
# Reset the layout
par(mfrow = c(1, 1))
# drop X4 (Humidity Outside) as a feature from the data frame
df_scaled$X4<- NULL
dim(df_scaled)
# randomly select 340 rows out of total 671 rows
set.seed(123) # to ensure reproducibility
df <- df_scaled[sample(1:671,340),c(1:5)]
head(df) # view the top 5 rows of the randomly selected 340 samples
dim(df)  # confirm the dimensions
# Save selected_variables to a text file
write.table(df, "name-transformed.txt")
# Scatter Plots of selected features vs the dependent variable - Y
num_features = ncol(df) - 1
par(mfrow = c(ceiling(num_features/2), 2))  # Adjusted the layout to accommodate odd numbers of features
target_feature = 'Y'
for (feature in names(df)) {
if (feature != target_feature) {
plot(df[[feature]],
df[[target_feature]],
main = paste(feature, "vs", target_feature),
xlab = feature,
ylab = target_feature,
col = "blue",  # Changed color to blue for better visibility
pch = 16)      # Use solid circles for data points
abline(lm(df[[target_feature]] ~ df[[feature]]), col = "red", lwd = 2)  # Adding AB line
}
}
# install libraries to run linear programming models
## If not installed use <- install.packages("lpSolveAPI")
library(lpSolveAPI)
source('AggWaFit718.R')
# a. A weighted arithmetic mean (WAM),
fit.QAM(df,
output.1<-"AM_output.txt",
stats.1<-"AM_stats.txt",
g<-AM,
g.inv<-invAM)
# b. Weighted power means (WPM) with p <- 0.5,
fit.QAM(df,
output.1<-"PM05_output.txt",
stats.1<-"PM05_stats.txt",
g<-PM05,
g.inv <- invPM05)
# c. Weighted power means (WPM) with p <- 2,
fit.QAM(df,
output.1<-"QM_output.txt",
stats.1<-"QM_stats.txt",
g<-QM,
g.inv <- invQM)
# d. An ordered weighted averaging function (OWA).
matrix_df = as.matrix(df)  # for Ordered Weighted Average the data frame is converted to a matrix
fit.OWA(matrix_df,
output.1<-"OWA_output.txt",
stats.1<-"OWA_stats.txt")
# e. The Choquet integral
fit.choquet(df,
output.1<-"CHOQUET_output.txt",
stats.1<-"CHOQUET_stats.txt")
# New data
X1<-22
X2<-38
X3<-4
X4<-88.2 # we have dropped this feature from our data set
X5<-34
min_value_X1 <- min(data$X1)
min_value_X2 <- min(data$X2)
min_value_X3 <- min(data$X3)
min_value_X5 <- min(data$X5)
min_value_Y  <- min(data$Y)
max_value_X1 <- max(data$X1)
max_value_X2 <- max(data$X2)
max_value_X3 <- max(data$X3)
max_value_X5 <- max(data$X5)
max_value_Y  <- max(data$Y)
# Apply min-max scaling
scale_function <- function(x, min_val, max_val) {
(x - min_val) / (max_val - min_val)
}
X1_scaled <- scale_function(X1, min_value_X1, max_value_X1)
X2_scaled <- scale_function(X2, min_value_X2, max_value_X2)
X3_scaled <- scale_function(X3, min_value_X3, max_value_X3)
X5_scaled <- scale_function(X5, min_value_X5, max_value_X5)
X1_scaled
X2_scaled
X3_scaled
X5_scaled
ChoquetWeights = c(0,
0,
0,
0.0682615925604888,
0.0682615925604888,
0.0682615925604888,
0.0682615925604888,
0.0620276949741637,
0.127987735279462,
0.0620276949741637,
0.127987735279462,
0.19351506089918,
0.382102163216329,
0.19351506089918,
0.999999999999998)
Y_scaled_predicted = choquet(c(X1_scaled,X2_scaled,X3_scaled,X5_scaled),
ChoquetWeights)
Y_scaled_predicted
# Apply reverse min_max scaling
rev_scale_function <- function(x, min_val, max_val) {
(x*(max_val - min_val) + min_val)
}
Y_predicted <- rev_scale_function(Y_scaled_predicted,min_value_Y,max_value_Y)
Y_predicted
Y_actual = 100
Absolute_Percent_Error <- abs(Y_predicted - Y_actual)*100 / Y_actual
Absolute_Percent_Error
